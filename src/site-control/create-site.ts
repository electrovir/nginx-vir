import {log as logImport} from '@augment-vir/common';
import {existsSync} from 'node:fs';
import {mkdir, writeFile} from 'node:fs/promises';
import {dirname, join} from 'node:path';
import {generateNginxBlocks} from '../blocks/generate-block.js';
import {defaultNginxDirPath} from '../paths.js';
import {enableNginxSite} from './enable-site.js';
import {NginxSite} from './nginx-site.js';

/**
 * Creates an Nginx site file and, if configured, enables it. Make sure to remember to restart nginx
 * (`sudo systemctl restart nginx`) after adding a site.
 *
 * This will likely require sudo permissions if run with the default nginx dir (`/etc/nginx/`).
 *
 * @category Site Control
 * @throws `Error` if the site already exists.
 */
export async function createNginxSite(
    site: Readonly<NginxSite>,
    {
        nginxDirPath = defaultNginxDirPath,
        log = logImport,
    }: Readonly<
        Partial<{
            /** @default '/etc/nginx/' */
            nginxDirPath: string;
            log: typeof logImport;
        }>
    >,
) {
    const outputPath = join(nginxDirPath, 'sites-available', site.siteName);
    await mkdir(dirname(outputPath), {
        recursive: true,
    });

    if (existsSync(outputPath)) {
        throw new Error(`Site '${site.siteName}' already exists at '${outputPath}'`);
    }

    const siteString =
        '# generated by nginx-vir\n\n' + generateNginxBlocks(site.config).join('\n\n');

    await writeFile(outputPath, siteString);
    log.faint(`Site written to '${outputPath}'`);

    if (site.enabled) {
        await enableNginxSite(site.siteName, nginxDirPath);
        log.faint(`Site '${site.siteName}' enabled.`);
    }

    return {
        outputPath,
        siteString,
    };
}
